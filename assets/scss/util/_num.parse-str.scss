// ----
// CAST INTEGER
// Takes a string representation of a numeric
// value (see EoF examples) and casts it to a
// true SCSS integer of type `number`
// 
// @source[http://hugogiraudel.com/2014/01/15/sass-string-to-number/]
// 
// ----
@function _length($number, $unit) {
	$strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
	$units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
	$index: index($strings, $unit);
	@if not $index {
		@warn "Unknown unit `#{$unit}`.";
		@return false;
	}
	@return $number * nth($units, $index);
}
@function num($string) {
	@if type-of($string)=='string' {
		// Matrices
		$strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
		$numbers:  0   1   2   3   4   5   6   7   8   9;
		// Result
		$result: 0;
		$divider: 0;
		$minus: false;
		// Looping through all characters
		@for $i from 1 through str-length($string) {
			$character: str-slice($string, $i, $i);
			$index: index($strings, $character);
			@if $character == '-' {
				$minus: true;
			}
			@else if $character == '.' {
				$divider: 1;
			}
			@else {
				@if not $index {
					$result: if($minus, $result * -1, $result);
					@return _length($result, str-slice($string, $i));
				}
				$number: nth($numbers, $index);
				@if $divider == 0 {
					$result: $result * 10;
				}
				@else {
					// Move the decimal dot to the left
					$divider: $divider * 10;
					$number: $number / $divider;
				}
				$result: $result + $number;
			}
		}
		@return if($minus, $result * -1, $result);
	} @else {
		$warnings: _debug("@parseNum requires arg $string to be of type [str], [#{type-of($string)}] given.");
		@return if(type-of($string)=='number',$string,false);
	}
}

// EXAMPLES:
// 
// sass {
//   cast: num("-15");    // -15
//   cast: num("-1");     // -1
//   cast: num("-.5");    // -.5
//   cast: num("-0");     // 0
//   cast: num("0");      // 0
//   case: num(".10");    // 0.1
//   cast: num("1");      // 1
//   cast: num("1.5");    // 1.5
//   cast: num("10.");    // 10
//   cast: num("12.380"); // 12.38
//   cast: num("42");     // 42
//   cast: num("1337");   // 1337

//   cast: num("-10px");  // -10px
//   cast: num("20em");   // 20em
//   cast: num("30ch");   // 30ch

//   cast: num("1fail");  // Error
//   cast: num("string"); // Error
// }