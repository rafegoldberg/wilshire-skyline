// VARIABLES
	$_BOXES: ();
	$_BOX_DEBUG: true;
	$_BOX_OPTS: (
		name: box,
		gridle: ( gutter: right left ),
		extend: false,
		convention: explicit,
	);
//
// FUNCTIONS
// > Private Utilities
	@function _box_generate_classname($opts){
		$class: if(map-get($opts,convention)==implicit,"box-#{map-get($opts,name)}","#{map-get($opts,name)}Box");
		$selector: if(map-get($opts,convention)==implicit,"%#{$class}",".#{$class}");
		@return extend($opts,(
			base: $class,
			selector: $selector,
		));
	}
	@function _box_register($opts) {
		$opts: _box_generate_classname(extend($_BOX_OPTS,$opts));
		$_BOXES: map-set($_BOXES,map-get($opts,name),$opts) !global;
		@return $opts;
	}
// > Public Utilities
	@function boxOptions($box){
	  @return map-get($_BOXES,$box);
	}
	@function boxOption($box,$key){
	  $option: map-get-deep($_BOXES,$box,$key);
	  @return $option;
	}
//
// MIXINS
// > Debug
	@mixin _box_debugLog($opt:false){
		@include _debug("|>————————————————————————————————|");
		@include _debug("|> BOXES");
		@each $name, $box in $_BOXES {
			@if ($opt==false) {
				@include _debug("|> + #{$name}");
			} @else {
				 @include _debug("|> + #{$name} #{boxOption($name,$opt)}");
			}
		}
		@include _debug("|>");
	}
	@mixin _box_debugClass($opts:()){
		$class: box; //@todo[hardcoded for now; update arglist on refactor]
		@if ($class) {
			$opts: extend((
				width: 1px,
				style: solid,
				color: magenta,
			),$opts);
			@at-root .rgdebug, .debug-#{$class} { %#{$class}debug {
				outline-width: map-get($opts,width);
				outline-style: map-get($opts,style);
				outline-color: map-get($opts,color);
				outline-offset: -1px;
			}}

			& { @extend %#{$class}debug; }

		} @else { @warn "_debug_style($class,$opts:()) requires $class"; }
	}
// > Base
	@mixin newBox($opts:()) { 
		$opts: _box_register($opts);
		@at-root #{map-get($opts,selector)} {
			@include gridle_set(map-get($opts,gridle));
			@extend #{map-get($opts,extend)} !optional;
			@content;
			@if ($_BOX_DEBUG) { @include _box_debugClass((style:solid)); }
		}
	}
	@mixin boxExtend($box){
	  @if (boxOption($box,convention)==implicit) {
	    @extend #{boxOption($box,selector)} !optional;
	  }
	}