/////////////////////////////////////////////////////
//                                                 //
//             SITE-WIDE VAR UTILITIES             //
//                                                 //
/////////////////////////////////////////////////////

//——————————————————————————————————————————————————
//                      LAYOUT                      
// 
// Map variables that consist of settings for every
// state keyword as defined in the $breaks var. The
// keywords currently in use are as follows:
// - [d] desktop
// - [t] tablet
// - [m] mobile
// 
@function _breaks($name,$key) { @return map-get( map-get($breaks,$name), $key ); }

@function _sz($z) { @return nth($scale,num($z)); }
@function _ms($z,$units:em) {
	$units: if($units=='rem',1rem,if($units=='px',map-get($_TYPE,base),map-get($_TYPE,rhythm)));
	@return ms(_sz(num($z)),$units);
}
@mixin scale($z,$property:font-size,$units:em) {
	$units: if($units=='rem',1rem,if($units=='px',map-get($_TYPE,base),map-get($_TYPE,rhythm)));
	@include ms-respond($property,_sz(num($z)),$ms-range,$units);
}
// 
//——————————————————————————————————————————————————
//                  THEME & COLORS                  
// 
@function _grey($key){ @return map-get($greys,$key); } //@is[get any/all greyscale colors]@type[get]
@function _theme($key){ @return map-get($theme,$key); } //@is[get any/all preset theme colors]@type[get]
@function _c($key){ @return map-get($colors,$key); } //@is[get any/all preset UI colors]@type[getmerged]
// 
//———————————————————————————————————————————————————
//                    TYPOGRAPHY                    
// 
@function _ff($fam){ @return #{map-get($ff,$fam)}; } //@is[get preset typeface declarations]@type[get]