//––––––––––––––––––––––––––––––
// VARIABLES
//
	$_BLOCS: ();
	$_BLOC_DEBUG: true;
	$_BLOC_: (
		name: bloc,
		extend: 'false',
		includes: '.pad7A',
		convention: explicit,
		gridle: (
			parent:    true,
			container: true,
			centered:  true,
			no_gutter: top right bottom left,
			m: (grid: 12),
		),
	);

//––––––––––––––––––––––––––––––
// INITIALIZE
//

//––––––––––––––––––––––––––––––
// INSTANTIATE
//
	@mixin newBloc($opts:()) {
	// |
	// | REGISTER BLOC OPTS
	// | 
		$bloc: _bloc_register($opts) !global;
	// | 
	// | GENERATE BLOC STYLES
	// | 
		@at-root #{map-get($bloc,selector)} {
		// | 
		// | DEFAULTS
		// | 
			@include gridle_set(map-get($bloc,gridle));

			$extend: map-get($bloc,includes);
			$extend: if( type-of($extend)==list, "#{map-get($_BLOC_,includes)}, #{nth($extend,1)}", $extend );
			@extend #{".d-b, #{$extend}"} !optional;

		// | 
		// | USER CONTENT
		// | has access to $bloc variable
		// | 
			@content;
		// |
		// | RESET
		// |
			@include _reset_bloc_args;
		// |
		// | DEBUG
		// |
			@if ($_BLOC_DEBUG) { @include _bloc_debugClass((color:cyan,style:dashed)); }
		}
	}

//––––––––––––––––––––––––––––––
// METHODS
// 
//  REGISTER
	@function _bloc_register($opts) {
		$bloc: getBlocClass(extend($_BLOC_,$opts));
		$_BLOCS: map-set($_BLOCS,map-get($opts,name),$opts) !global;
		@return $bloc;
	}
	@mixin _reset_bloc_args(){
		$bloc: () !global;
	}
//  DEBUG
	@mixin _bloc_debugClass($debug_opts:()){
		$class: bloc; //@todo[hardcoded for now; update arglist on refactor]
		@if ($class) {
			$debug_opts: extend((
				width: 1px,
				style: solid,
				color: magenta,
			),$debug_opts);
			@at-root .rgdebug, .debug-#{$class} { %#{$class}debug {
				outline-width: map-get($debug_opts,width);
				outline-style: map-get($debug_opts,style) !important;
				outline-color: map-get($debug_opts,color) !important;
				outline-offset: -1px;
			}}

			& { @extend %#{$class}debug; }

		} @else { @warn "_debug_style($class,$opts:()) requires $class"; }
	}
	@mixin _bloc_debugLog($opt:false){
		@include _debug("|>————————————————————————————————|");
		@include _debug("|> BLOCS");
		@each $name, $bloc in $_BLOCS {
			@if ($opt==false) {
				@include _debug("|> + #{$name}");
			} @else {
				 @include _debug("|> + #{$name} #{boxOption($name,$opt)}");
			}
		}
		@include _debug("|>");
	}

//––––––––––––––––––––––––––––––
// PUBLIC
// 
	// GET UTILS
	@function getBloc($name){
		@return map-get($_BLOCS,$name);
	}
	@function getBlocOpt($bloc,$key){
		$bloc_name: if( type-of($bloc)==map, getBlocName($bloc), $bloc );
		$bloc_name: if( type-of($bloc)==string, $bloc, false);
		@if $bloc_name {
			@return map-get-deep($_BLOCS,$bloc,$key);
		} @else {
			@warn "getBlocOpt() ——— no registered bloc “#{$bloc_name}”";
			@return false;
		}
	}
	@function getBlocClass($opts,$asString:false){
		$class: if(map-get($opts,convention)==implicit,"bloc-#{map-get($opts,name)}","#{map-get($opts,name)}Bloc");
		$selector: if(map-get($opts,convention)==implicit,"%#{$class}",".#{$class}");
		@if $asString {
			@return $class;
		} @else {
			@return extend($opts,(
				base: $class,
				selector: $selector,
			));
		}
	}
	@function getBlocName($bloc){
		@return map-get($bloc,name);
	}
	// SET UTILS
	// USE UTILS
	@mixin extendBloc($bloc){
		@if (getBlocOpt($bloc,convention)==implicit) {
			@extend #{getBlocOpt($bloc,selector)} !optional;
		}
	}